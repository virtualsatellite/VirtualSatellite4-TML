/*
 * generated by Xtext 2.26.0
 */
package de.dlr.sc.virsat.model.ext.tml.structural.declaration.serializer;

import com.google.inject.Inject;
import de.dlr.sc.virsat.model.ext.tml.structural.declaration.services.DatatypeDefinitionGrammarAccess;
import de.dlr.sc.virsat.model.ext.tml.structural.serializer.DeclarationLangaugeSemanticSequencer;
import de.dlr.sc.virsat.model.ext.tml.structural.structural.ArrayDimension;
import de.dlr.sc.virsat.model.ext.tml.structural.structural.Attribute;
import de.dlr.sc.virsat.model.ext.tml.structural.structural.DataType;
import de.dlr.sc.virsat.model.ext.tml.structural.structural.ExternalType;
import de.dlr.sc.virsat.model.ext.tml.structural.structural.StructuralPackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;

@SuppressWarnings("all")
public class DatatypeDefinitionSemanticSequencer extends DeclarationLangaugeSemanticSequencer {

	@Inject
	private DatatypeDefinitionGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StructuralPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StructuralPackage.ARRAY_DIMENSION:
				sequence_ArrayDimension(context, (ArrayDimension) semanticObject); 
				return; 
			case StructuralPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case StructuralPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case StructuralPackage.EXTERNAL_TYPE:
				sequence_ExternalType(context, (ExternalType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     StartRule returns DataType
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     (abstractType?='abstract'? isTMType?='telemetry'? name=EString superType=[DataType|FQN]? attributes+=Attribute*)
	 * </pre>
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StartRule returns ExternalType
	 *     ExternalType returns ExternalType
	 *
	 * Constraint:
	 *     (abstractType?='abstract'? isTMType?='telemetry'? name=EString superType=[DataType|FQN]? attributes+=Attribute*)
	 * </pre>
	 */
	protected void sequence_ExternalType(ISerializationContext context, ExternalType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
