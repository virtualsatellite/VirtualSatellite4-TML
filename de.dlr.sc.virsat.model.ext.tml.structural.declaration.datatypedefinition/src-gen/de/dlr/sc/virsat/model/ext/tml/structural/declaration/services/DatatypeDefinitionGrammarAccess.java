/*
 * generated by Xtext 2.22.0
 */
package de.dlr.sc.virsat.model.ext.tml.structural.declaration.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.dlr.sc.virsat.model.ext.tml.structural.services.DeclarationLangaugeGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DatatypeDefinitionGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class StartRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dlr.sc.virsat.model.ext.tml.structural.declaration.DatatypeDefinition.StartRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExternalTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StartRule DataType:
		//	DataType | ExternalType;
		@Override public ParserRule getRule() { return rule; }
		
		//DataType | ExternalType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_0() { return cDataTypeParserRuleCall_0; }
		
		//ExternalType
		public RuleCall getExternalTypeParserRuleCall_1() { return cExternalTypeParserRuleCall_1; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dlr.sc.virsat.model.ext.tml.structural.declaration.DatatypeDefinition.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractTypeAbstractKeyword_0_0 = (Keyword)cAbstractTypeAssignment_0.eContents().get(0);
		private final Assignment cIsTMTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsTMTypeTelemetryKeyword_1_0 = (Keyword)cIsTMTypeAssignment_1.eContents().get(0);
		private final Keyword cDataTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSuperTypeDataTypeCrossReference_4_1_0 = (CrossReference)cSuperTypeAssignment_4_1.eContents().get(0);
		private final RuleCall cSuperTypeDataTypeFQNParserRuleCall_4_1_0_1 = (RuleCall)cSuperTypeDataTypeCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAttributesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAttributesAttributeParserRuleCall_6_0 = (RuleCall)cAttributesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DataType:
		//	abstractType?='abstract'? isTMType?='telemetry'? 'DataType' name=EString ('extends' superType=[DataType|FQN])?
		//	'{'
		//	attributes+=Attribute*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//abstractType?='abstract'? isTMType?='telemetry'? 'DataType' name=EString ('extends' superType=[DataType|FQN])? '{'
		//attributes+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//abstractType?='abstract'?
		public Assignment getAbstractTypeAssignment_0() { return cAbstractTypeAssignment_0; }
		
		//'abstract'
		public Keyword getAbstractTypeAbstractKeyword_0_0() { return cAbstractTypeAbstractKeyword_0_0; }
		
		//isTMType?='telemetry'?
		public Assignment getIsTMTypeAssignment_1() { return cIsTMTypeAssignment_1; }
		
		//'telemetry'
		public Keyword getIsTMTypeTelemetryKeyword_1_0() { return cIsTMTypeTelemetryKeyword_1_0; }
		
		//'DataType'
		public Keyword getDataTypeKeyword_2() { return cDataTypeKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('extends' superType=[DataType|FQN])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'extends'
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }
		
		//superType=[DataType|FQN]
		public Assignment getSuperTypeAssignment_4_1() { return cSuperTypeAssignment_4_1; }
		
		//[DataType|FQN]
		public CrossReference getSuperTypeDataTypeCrossReference_4_1_0() { return cSuperTypeDataTypeCrossReference_4_1_0; }
		
		//FQN
		public RuleCall getSuperTypeDataTypeFQNParserRuleCall_4_1_0_1() { return cSuperTypeDataTypeFQNParserRuleCall_4_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_6() { return cAttributesAssignment_6; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_6_0() { return cAttributesAttributeParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ExternalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dlr.sc.virsat.model.ext.tml.structural.declaration.DatatypeDefinition.ExternalType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAbstractTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractTypeAbstractKeyword_1_0 = (Keyword)cAbstractTypeAssignment_1.eContents().get(0);
		private final Assignment cIsTMTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsTMTypeTelemetryKeyword_2_0 = (Keyword)cIsTMTypeAssignment_2.eContents().get(0);
		private final Keyword cDataTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameEStringParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExtendsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSuperTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSuperTypeDataTypeCrossReference_5_1_0 = (CrossReference)cSuperTypeAssignment_5_1.eContents().get(0);
		private final RuleCall cSuperTypeDataTypeFQNParserRuleCall_5_1_0_1 = (RuleCall)cSuperTypeDataTypeCrossReference_5_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAttributesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAttributesAttributeParserRuleCall_7_0 = (RuleCall)cAttributesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ExternalType:
		//	'external' abstractType?='abstract'? isTMType?='telemetry'? 'DataType' name=EString ('extends'
		//	superType=[DataType|FQN])?
		//	'{'
		//	attributes+=Attribute*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'external' abstractType?='abstract'? isTMType?='telemetry'? 'DataType' name=EString ('extends'
		//superType=[DataType|FQN])? '{' attributes+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//'external'
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }
		
		//abstractType?='abstract'?
		public Assignment getAbstractTypeAssignment_1() { return cAbstractTypeAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractTypeAbstractKeyword_1_0() { return cAbstractTypeAbstractKeyword_1_0; }
		
		//isTMType?='telemetry'?
		public Assignment getIsTMTypeAssignment_2() { return cIsTMTypeAssignment_2; }
		
		//'telemetry'
		public Keyword getIsTMTypeTelemetryKeyword_2_0() { return cIsTMTypeTelemetryKeyword_2_0; }
		
		//'DataType'
		public Keyword getDataTypeKeyword_3() { return cDataTypeKeyword_3; }
		
		//name=EString
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_4_0() { return cNameEStringParserRuleCall_4_0; }
		
		//('extends' superType=[DataType|FQN])?
		public Group getGroup_5() { return cGroup_5; }
		
		//'extends'
		public Keyword getExtendsKeyword_5_0() { return cExtendsKeyword_5_0; }
		
		//superType=[DataType|FQN]
		public Assignment getSuperTypeAssignment_5_1() { return cSuperTypeAssignment_5_1; }
		
		//[DataType|FQN]
		public CrossReference getSuperTypeDataTypeCrossReference_5_1_0() { return cSuperTypeDataTypeCrossReference_5_1_0; }
		
		//FQN
		public RuleCall getSuperTypeDataTypeFQNParserRuleCall_5_1_0_1() { return cSuperTypeDataTypeFQNParserRuleCall_5_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_7() { return cAttributesAssignment_7; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_7_0() { return cAttributesAttributeParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	
	
	private final StartRuleElements pStartRule;
	private final DataTypeElements pDataType;
	private final ExternalTypeElements pExternalType;
	
	private final Grammar grammar;
	
	private final DeclarationLangaugeGrammarAccess gaDeclarationLangauge;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DatatypeDefinitionGrammarAccess(GrammarProvider grammarProvider,
			DeclarationLangaugeGrammarAccess gaDeclarationLangauge,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDeclarationLangauge = gaDeclarationLangauge;
		this.gaTerminals = gaTerminals;
		this.pStartRule = new StartRuleElements();
		this.pDataType = new DataTypeElements();
		this.pExternalType = new ExternalTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.dlr.sc.virsat.model.ext.tml.structural.declaration.DatatypeDefinition".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DeclarationLangaugeGrammarAccess getDeclarationLangaugeGrammarAccess() {
		return gaDeclarationLangauge;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StartRule DataType:
	//	DataType | ExternalType;
	public StartRuleElements getStartRuleAccess() {
		return pStartRule;
	}
	
	public ParserRule getStartRuleRule() {
		return getStartRuleAccess().getRule();
	}
	
	//DataType:
	//	abstractType?='abstract'? isTMType?='telemetry'? 'DataType' name=EString ('extends' superType=[DataType|FQN])?
	//	'{'
	//	attributes+=Attribute*
	//	'}';
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//ExternalType:
	//	'external' abstractType?='abstract'? isTMType?='telemetry'? 'DataType' name=EString ('extends'
	//	superType=[DataType|FQN])?
	//	'{'
	//	attributes+=Attribute*
	//	'}';
	public ExternalTypeElements getExternalTypeAccess() {
		return pExternalType;
	}
	
	public ParserRule getExternalTypeRule() {
		return getExternalTypeAccess().getRule();
	}
	
	//Attribute:
	//	isConst?='const'? name=EString ':' typeOf=[IType|FQN] dimensions+=ArrayDimension* ('=' valueLiteral=EString ';' | ';'
	//	| ('{' ('value' ':' valueLiteral=EString ';')? & ('max' ':' maxValueLiteral=EString ';')? & ('min' ':'
	//	minValueLiteral=EString ';')? & ('referenceFrame' ':' referenceFrame=[ReferenceFrameDefinition|FQN] ';')? & ('unit'
	//	':' typeUnit=[UnitDefinition|FQN] ';')?
	//	'}' ';')?);
	public DeclarationLangaugeGrammarAccess.AttributeElements getAttributeAccess() {
		return gaDeclarationLangauge.getAttributeAccess();
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//ArrayDimension:
	//	'[' size=EInt (',' 'name' '=' name=EString)? ']';
	public DeclarationLangaugeGrammarAccess.ArrayDimensionElements getArrayDimensionAccess() {
		return gaDeclarationLangauge.getArrayDimensionAccess();
	}
	
	public ParserRule getArrayDimensionRule() {
		return getArrayDimensionAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public DeclarationLangaugeGrammarAccess.EStringElements getEStringAccess() {
		return gaDeclarationLangauge.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public DeclarationLangaugeGrammarAccess.EIntElements getEIntAccess() {
		return gaDeclarationLangauge.getEIntAccess();
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public DeclarationLangaugeGrammarAccess.FQNElements getFQNAccess() {
		return gaDeclarationLangauge.getFQNAccess();
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
