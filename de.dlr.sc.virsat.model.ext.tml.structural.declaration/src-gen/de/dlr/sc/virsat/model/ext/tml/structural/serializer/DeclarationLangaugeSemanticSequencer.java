/*
 * generated by Xtext 2.22.0
 */
package de.dlr.sc.virsat.model.ext.tml.structural.serializer;

import com.google.inject.Inject;
import de.dlr.sc.virsat.model.ext.tml.structural.services.DeclarationLangaugeGrammarAccess;
import de.dlr.sc.virsat.model.ext.tml.structural.structural.ArrayDimension;
import de.dlr.sc.virsat.model.ext.tml.structural.structural.Attribute;
import de.dlr.sc.virsat.model.ext.tml.structural.structural.StructuralPackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class DeclarationLangaugeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DeclarationLangaugeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StructuralPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StructuralPackage.ARRAY_DIMENSION:
				sequence_ArrayDimension(context, (ArrayDimension) semanticObject); 
				return; 
			case StructuralPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ArrayDimension returns ArrayDimension
	 *
	 * Constraint:
	 *     (size=EInt name=EString?)
	 */
	protected void sequence_ArrayDimension(ISerializationContext context, ArrayDimension semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (
	 *         isConst?='const'? 
	 *         name=EString 
	 *         typeOf=[IType|FQN] 
	 *         dimensions+=ArrayDimension* 
	 *         (
	 *             valueLiteral=EString | 
	 *             (valueLiteral=EString | maxValueLiteral=EString | minValueLiteral=EString | referenceFrame=[ReferenceFrameDefinition|FQN] | typeUnit=[UnitDefinition|FQN])+
	 *         )?
	 *     )
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
