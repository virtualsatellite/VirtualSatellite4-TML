/**
 */
package de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.provider;

import de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.util.BehavioralAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BehavioralItemProviderAdapterFactory extends BehavioralAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BehavioralItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.BehavioralParameterDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehavioralParameterDefinitionItemProvider behavioralParameterDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.BehavioralParameterDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehavioralParameterDefinitionAdapter() {
		if (behavioralParameterDefinitionItemProvider == null) {
			behavioralParameterDefinitionItemProvider = new BehavioralParameterDefinitionItemProvider(this);
		}

		return behavioralParameterDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.ChannelBehaviorDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChannelBehaviorDefinitionItemProvider channelBehaviorDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.ChannelBehaviorDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChannelBehaviorDefinitionAdapter() {
		if (channelBehaviorDefinitionItemProvider == null) {
			channelBehaviorDefinitionItemProvider = new ChannelBehaviorDefinitionItemProvider(this);
		}

		return channelBehaviorDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.BehaviorDefintionStorage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehaviorDefintionStorageItemProvider behaviorDefintionStorageItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.BehaviorDefintionStorage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehaviorDefintionStorageAdapter() {
		if (behaviorDefintionStorageItemProvider == null) {
			behaviorDefintionStorageItemProvider = new BehaviorDefintionStorageItemProvider(this);
		}

		return behaviorDefintionStorageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.BehaviorDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehaviorDefinitionItemProvider behaviorDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.BehaviorDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehaviorDefinitionAdapter() {
		if (behaviorDefinitionItemProvider == null) {
			behaviorDefinitionItemProvider = new BehaviorDefinitionItemProvider(this);
		}

		return behaviorDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.TimeEventBehaviorDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeEventBehaviorDefinitionItemProvider timeEventBehaviorDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.TimeEventBehaviorDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeEventBehaviorDefinitionAdapter() {
		if (timeEventBehaviorDefinitionItemProvider == null) {
			timeEventBehaviorDefinitionItemProvider = new TimeEventBehaviorDefinitionItemProvider(this);
		}

		return timeEventBehaviorDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.TaskBehavior} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskBehaviorItemProvider taskBehaviorItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.TaskBehavior}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskBehaviorAdapter() {
		if (taskBehaviorItemProvider == null) {
			taskBehaviorItemProvider = new TaskBehaviorItemProvider(this);
		}

		return taskBehaviorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.BehaviorParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehaviorParameterItemProvider behaviorParameterItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.BehaviorParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehaviorParameterAdapter() {
		if (behaviorParameterItemProvider == null) {
			behaviorParameterItemProvider = new BehaviorParameterItemProvider(this);
		}

		return behaviorParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.ChannelBehavior} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChannelBehaviorItemProvider channelBehaviorItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.behavioral.behavioral.ChannelBehavior}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChannelBehaviorAdapter() {
		if (channelBehaviorItemProvider == null) {
			channelBehaviorItemProvider = new ChannelBehaviorItemProvider(this);
		}

		return channelBehaviorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (behavioralParameterDefinitionItemProvider != null) behavioralParameterDefinitionItemProvider.dispose();
		if (channelBehaviorDefinitionItemProvider != null) channelBehaviorDefinitionItemProvider.dispose();
		if (behaviorDefintionStorageItemProvider != null) behaviorDefintionStorageItemProvider.dispose();
		if (behaviorDefinitionItemProvider != null) behaviorDefinitionItemProvider.dispose();
		if (timeEventBehaviorDefinitionItemProvider != null) timeEventBehaviorDefinitionItemProvider.dispose();
		if (taskBehaviorItemProvider != null) taskBehaviorItemProvider.dispose();
		if (behaviorParameterItemProvider != null) behaviorParameterItemProvider.dispose();
		if (channelBehaviorItemProvider != null) channelBehaviorItemProvider.dispose();
	}

}
