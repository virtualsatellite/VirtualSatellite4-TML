/*
 * generated by Xtext 2.22.0
 */
package de.dlr.sc.virsat.model.ext.tml.structural.declaration.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.dlr.sc.virsat.model.ext.tml.structural.services.DeclarationLangaugeGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TaskDefinitionGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TaskDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dlr.sc.virsat.model.ext.tml.structural.declaration.TaskDefinition.TaskDefinition");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cTaskKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cInputsKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Assignment cInputsAssignment_0_3_2 = (Assignment)cGroup_0_3.eContents().get(2);
		private final RuleCall cInputsTaskInputDefinitionParserRuleCall_0_3_2_0 = (RuleCall)cInputsAssignment_0_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3_3 = (Keyword)cGroup_0_3.eContents().get(3);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cOutputsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOutputsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOutputsTaskOutputDefinitionParserRuleCall_1_2_0 = (RuleCall)cOutputsAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cParametersKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cParametersAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cParametersAttributeParserRuleCall_2_0_2_0 = (RuleCall)cParametersAssignment_2_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//TaskDefinition:
		//	'Task' name=EString '{' ('inputs' '{' inputs+=TaskInputDefinition* '}')? & ('outputs' '{'
		//	outputs+=TaskOutputDefinition* '}')? & ('parameters' '{' parameters+=Attribute* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Task' name=EString '{' ('inputs' '{' inputs+=TaskInputDefinition* '}')? & ('outputs' '{' outputs+=TaskOutputDefinition*
		//'}')? & ('parameters' '{' parameters+=Attribute* '}')? '}'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'Task' name=EString '{' ('inputs' '{' inputs+=TaskInputDefinition* '}')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'Task'
		public Keyword getTaskKeyword_0_0() { return cTaskKeyword_0_0; }
		
		//name=EString
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_1_0() { return cNameEStringParserRuleCall_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//('inputs' '{' inputs+=TaskInputDefinition* '}')?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'inputs'
		public Keyword getInputsKeyword_0_3_0() { return cInputsKeyword_0_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_3_1() { return cLeftCurlyBracketKeyword_0_3_1; }
		
		//inputs+=TaskInputDefinition*
		public Assignment getInputsAssignment_0_3_2() { return cInputsAssignment_0_3_2; }
		
		//TaskInputDefinition
		public RuleCall getInputsTaskInputDefinitionParserRuleCall_0_3_2_0() { return cInputsTaskInputDefinitionParserRuleCall_0_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_3_3() { return cRightCurlyBracketKeyword_0_3_3; }
		
		//('outputs' '{' outputs+=TaskOutputDefinition* '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'outputs'
		public Keyword getOutputsKeyword_1_0() { return cOutputsKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//outputs+=TaskOutputDefinition*
		public Assignment getOutputsAssignment_1_2() { return cOutputsAssignment_1_2; }
		
		//TaskOutputDefinition
		public RuleCall getOutputsTaskOutputDefinitionParserRuleCall_1_2_0() { return cOutputsTaskOutputDefinitionParserRuleCall_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
		
		//('parameters' '{' parameters+=Attribute* '}')? '}'
		public Group getGroup_2() { return cGroup_2; }
		
		//('parameters' '{' parameters+=Attribute* '}')?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'parameters'
		public Keyword getParametersKeyword_2_0_0() { return cParametersKeyword_2_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0_1() { return cLeftCurlyBracketKeyword_2_0_1; }
		
		//parameters+=Attribute*
		public Assignment getParametersAssignment_2_0_2() { return cParametersAssignment_2_0_2; }
		
		//Attribute
		public RuleCall getParametersAttributeParserRuleCall_2_0_2_0() { return cParametersAttributeParserRuleCall_2_0_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_0_3() { return cRightCurlyBracketKeyword_2_0_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1() { return cRightCurlyBracketKeyword_2_1; }
	}
	public class TaskInputDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dlr.sc.virsat.model.ext.tml.structural.declaration.TaskDefinition.TaskInputDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDataTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cDataTypeDataTypeCrossReference_1_1_0 = (CrossReference)cDataTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cDataTypeDataTypeFQNParserRuleCall_1_1_0_1 = (RuleCall)cDataTypeDataTypeCrossReference_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TaskInputDefinition:
		//	name=EString (':' dataType=[DataType|FQN])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString (':' dataType=[DataType|FQN])? ';'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//(':' dataType=[DataType|FQN])?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//dataType=[DataType|FQN]
		public Assignment getDataTypeAssignment_1_1() { return cDataTypeAssignment_1_1; }
		
		//[DataType|FQN]
		public CrossReference getDataTypeDataTypeCrossReference_1_1_0() { return cDataTypeDataTypeCrossReference_1_1_0; }
		
		//FQN
		public RuleCall getDataTypeDataTypeFQNParserRuleCall_1_1_0_1() { return cDataTypeDataTypeFQNParserRuleCall_1_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class TaskOutputDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dlr.sc.virsat.model.ext.tml.structural.declaration.TaskDefinition.TaskOutputDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDataTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cDataTypeDataTypeCrossReference_1_1_0 = (CrossReference)cDataTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cDataTypeDataTypeFQNParserRuleCall_1_1_0_1 = (RuleCall)cDataTypeDataTypeCrossReference_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TaskOutputDefinition:
		//	name=EString (':' dataType=[DataType|FQN])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString (':' dataType=[DataType|FQN])? ';'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//(':' dataType=[DataType|FQN])?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//dataType=[DataType|FQN]
		public Assignment getDataTypeAssignment_1_1() { return cDataTypeAssignment_1_1; }
		
		//[DataType|FQN]
		public CrossReference getDataTypeDataTypeCrossReference_1_1_0() { return cDataTypeDataTypeCrossReference_1_1_0; }
		
		//FQN
		public RuleCall getDataTypeDataTypeFQNParserRuleCall_1_1_0_1() { return cDataTypeDataTypeFQNParserRuleCall_1_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	
	
	private final TaskDefinitionElements pTaskDefinition;
	private final TaskInputDefinitionElements pTaskInputDefinition;
	private final TaskOutputDefinitionElements pTaskOutputDefinition;
	
	private final Grammar grammar;
	
	private final DeclarationLangaugeGrammarAccess gaDeclarationLangauge;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TaskDefinitionGrammarAccess(GrammarProvider grammarProvider,
			DeclarationLangaugeGrammarAccess gaDeclarationLangauge,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDeclarationLangauge = gaDeclarationLangauge;
		this.gaTerminals = gaTerminals;
		this.pTaskDefinition = new TaskDefinitionElements();
		this.pTaskInputDefinition = new TaskInputDefinitionElements();
		this.pTaskOutputDefinition = new TaskOutputDefinitionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.dlr.sc.virsat.model.ext.tml.structural.declaration.TaskDefinition".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DeclarationLangaugeGrammarAccess getDeclarationLangaugeGrammarAccess() {
		return gaDeclarationLangauge;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TaskDefinition:
	//	'Task' name=EString '{' ('inputs' '{' inputs+=TaskInputDefinition* '}')? & ('outputs' '{'
	//	outputs+=TaskOutputDefinition* '}')? & ('parameters' '{' parameters+=Attribute* '}')?
	//	'}';
	public TaskDefinitionElements getTaskDefinitionAccess() {
		return pTaskDefinition;
	}
	
	public ParserRule getTaskDefinitionRule() {
		return getTaskDefinitionAccess().getRule();
	}
	
	//TaskInputDefinition:
	//	name=EString (':' dataType=[DataType|FQN])? ';';
	public TaskInputDefinitionElements getTaskInputDefinitionAccess() {
		return pTaskInputDefinition;
	}
	
	public ParserRule getTaskInputDefinitionRule() {
		return getTaskInputDefinitionAccess().getRule();
	}
	
	//TaskOutputDefinition:
	//	name=EString (':' dataType=[DataType|FQN])? ';';
	public TaskOutputDefinitionElements getTaskOutputDefinitionAccess() {
		return pTaskOutputDefinition;
	}
	
	public ParserRule getTaskOutputDefinitionRule() {
		return getTaskOutputDefinitionAccess().getRule();
	}
	
	//Attribute:
	//	isConst?='const'? name=EString ':' typeOf=[IType|FQN] dimensions+=ArrayDimension* ('=' valueLiteral=EString ';' | ';'
	//	| ('{' ('value' ':' valueLiteral=EString ';')? & ('max' ':' maxValueLiteral=EString ';')? & ('min' ':'
	//	minValueLiteral=EString ';')? & ('referenceFrame' ':' referenceFrame=[ReferenceFrameDefinition|FQN] ';')? & ('unit'
	//	':' typeUnit=[UnitDefinition|FQN] ';')?
	//	'}' ';')?);
	public DeclarationLangaugeGrammarAccess.AttributeElements getAttributeAccess() {
		return gaDeclarationLangauge.getAttributeAccess();
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//ArrayDimension:
	//	'[' size=EInt (',' 'name' '=' name=EString)? ']';
	public DeclarationLangaugeGrammarAccess.ArrayDimensionElements getArrayDimensionAccess() {
		return gaDeclarationLangauge.getArrayDimensionAccess();
	}
	
	public ParserRule getArrayDimensionRule() {
		return getArrayDimensionAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public DeclarationLangaugeGrammarAccess.EStringElements getEStringAccess() {
		return gaDeclarationLangauge.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public DeclarationLangaugeGrammarAccess.EIntElements getEIntAccess() {
		return gaDeclarationLangauge.getEIntAccess();
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public DeclarationLangaugeGrammarAccess.FQNElements getFQNAccess() {
		return gaDeclarationLangauge.getFQNAccess();
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
