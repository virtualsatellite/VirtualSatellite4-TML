/**
 */
package de.dlr.sc.virsat.model.ext.tml.structural.structural.provider;

import de.dlr.sc.virsat.model.ext.tml.structural.structural.util.StructuralAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class StructuralItemProviderAdapterFactory extends StructuralAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StructuralItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TaskingDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskingDefinitionItemProvider taskingDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TaskingDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskingDefinitionAdapter() {
		if (taskingDefinitionItemProvider == null) {
			taskingDefinitionItemProvider = new TaskingDefinitionItemProvider(this);
		}

		return taskingDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TaskingEnvironment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskingEnvironmentItemProvider taskingEnvironmentItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TaskingEnvironment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskingEnvironmentAdapter() {
		if (taskingEnvironmentItemProvider == null) {
			taskingEnvironmentItemProvider = new TaskingEnvironmentItemProvider(this);
		}

		return taskingEnvironmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.IEventSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IEventSourceItemProvider iEventSourceItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.IEventSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIEventSourceAdapter() {
		if (iEventSourceItemProvider == null) {
			iEventSourceItemProvider = new IEventSourceItemProvider(this);
		}

		return iEventSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.IType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ITypeItemProvider iTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.IType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createITypeAdapter() {
		if (iTypeItemProvider == null) {
			iTypeItemProvider = new ITypeItemProvider(this);
		}

		return iTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TaskDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskDefinitionItemProvider taskDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TaskDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskDefinitionAdapter() {
		if (taskDefinitionItemProvider == null) {
			taskDefinitionItemProvider = new TaskDefinitionItemProvider(this);
		}

		return taskDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TaskInputDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskInputDefinitionItemProvider taskInputDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TaskInputDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskInputDefinitionAdapter() {
		if (taskInputDefinitionItemProvider == null) {
			taskInputDefinitionItemProvider = new TaskInputDefinitionItemProvider(this);
		}

		return taskInputDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TaskOutputDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskOutputDefinitionItemProvider taskOutputDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TaskOutputDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskOutputDefinitionAdapter() {
		if (taskOutputDefinitionItemProvider == null) {
			taskOutputDefinitionItemProvider = new TaskOutputDefinitionItemProvider(this);
		}

		return taskOutputDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.BasicTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicTypeDefinitionItemProvider basicTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.BasicTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicTypeDefinitionAdapter() {
		if (basicTypeDefinitionItemProvider == null) {
			basicTypeDefinitionItemProvider = new BasicTypeDefinitionItemProvider(this);
		}

		return basicTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.ReferenceFrameDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceFrameDefinitionItemProvider referenceFrameDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.ReferenceFrameDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceFrameDefinitionAdapter() {
		if (referenceFrameDefinitionItemProvider == null) {
			referenceFrameDefinitionItemProvider = new ReferenceFrameDefinitionItemProvider(this);
		}

		return referenceFrameDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.UnitDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnitDefinitionItemProvider unitDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.UnitDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnitDefinitionAdapter() {
		if (unitDefinitionItemProvider == null) {
			unitDefinitionItemProvider = new UnitDefinitionItemProvider(this);
		}

		return unitDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TaskInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskInstanceItemProvider taskInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TaskInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskInstanceAdapter() {
		if (taskInstanceItemProvider == null) {
			taskInstanceItemProvider = new TaskInstanceItemProvider(this);
		}

		return taskInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TaskInput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskInputItemProvider taskInputItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TaskInput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskInputAdapter() {
		if (taskInputItemProvider == null) {
			taskInputItemProvider = new TaskInputItemProvider(this);
		}

		return taskInputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TaskOutput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskOutputItemProvider taskOutputItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TaskOutput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskOutputAdapter() {
		if (taskOutputItemProvider == null) {
			taskOutputItemProvider = new TaskOutputItemProvider(this);
		}

		return taskOutputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TimeEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeEventItemProvider timeEventItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.TimeEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeEventAdapter() {
		if (timeEventItemProvider == null) {
			timeEventItemProvider = new TimeEventItemProvider(this);
		}

		return timeEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.Channel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChannelItemProvider channelItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.Channel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChannelAdapter() {
		if (channelItemProvider == null) {
			channelItemProvider = new ChannelItemProvider(this);
		}

		return channelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.DataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataTypeItemProvider dataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.DataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataTypeAdapter() {
		if (dataTypeItemProvider == null) {
			dataTypeItemProvider = new DataTypeItemProvider(this);
		}

		return dataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.ExternalType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalTypeItemProvider externalTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.ExternalType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalTypeAdapter() {
		if (externalTypeItemProvider == null) {
			externalTypeItemProvider = new ExternalTypeItemProvider(this);
		}

		return externalTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.ArrayDimension} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayDimensionItemProvider arrayDimensionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.ArrayDimension}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayDimensionAdapter() {
		if (arrayDimensionItemProvider == null) {
			arrayDimensionItemProvider = new ArrayDimensionItemProvider(this);
		}

		return arrayDimensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.Enumeration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumerationItemProvider enumerationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.Enumeration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumerationAdapter() {
		if (enumerationItemProvider == null) {
			enumerationItemProvider = new EnumerationItemProvider(this);
		}

		return enumerationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.EnumerationLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumerationLiteralItemProvider enumerationLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.ext.tml.structural.structural.EnumerationLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumerationLiteralAdapter() {
		if (enumerationLiteralItemProvider == null) {
			enumerationLiteralItemProvider = new EnumerationLiteralItemProvider(this);
		}

		return enumerationLiteralItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (taskingDefinitionItemProvider != null) taskingDefinitionItemProvider.dispose();
		if (taskingEnvironmentItemProvider != null) taskingEnvironmentItemProvider.dispose();
		if (iEventSourceItemProvider != null) iEventSourceItemProvider.dispose();
		if (iTypeItemProvider != null) iTypeItemProvider.dispose();
		if (taskDefinitionItemProvider != null) taskDefinitionItemProvider.dispose();
		if (taskInputDefinitionItemProvider != null) taskInputDefinitionItemProvider.dispose();
		if (taskOutputDefinitionItemProvider != null) taskOutputDefinitionItemProvider.dispose();
		if (basicTypeDefinitionItemProvider != null) basicTypeDefinitionItemProvider.dispose();
		if (referenceFrameDefinitionItemProvider != null) referenceFrameDefinitionItemProvider.dispose();
		if (unitDefinitionItemProvider != null) unitDefinitionItemProvider.dispose();
		if (taskInstanceItemProvider != null) taskInstanceItemProvider.dispose();
		if (taskInputItemProvider != null) taskInputItemProvider.dispose();
		if (taskOutputItemProvider != null) taskOutputItemProvider.dispose();
		if (timeEventItemProvider != null) timeEventItemProvider.dispose();
		if (channelItemProvider != null) channelItemProvider.dispose();
		if (dataTypeItemProvider != null) dataTypeItemProvider.dispose();
		if (externalTypeItemProvider != null) externalTypeItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (arrayDimensionItemProvider != null) arrayDimensionItemProvider.dispose();
		if (enumerationItemProvider != null) enumerationItemProvider.dispose();
		if (enumerationLiteralItemProvider != null) enumerationLiteralItemProvider.dispose();
	}

}
